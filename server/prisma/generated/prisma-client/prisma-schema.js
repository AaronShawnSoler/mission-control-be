module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBoy {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Boy {
  id: ID!
  name: String!
}

type BoyConnection {
  pageInfo: PageInfo!
  edges: [BoyEdge]!
  aggregate: AggregateBoy!
}

input BoyCreateInput {
  id: ID
  name: String!
}

type BoyEdge {
  node: Boy!
  cursor: String!
}

enum BoyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BoyPreviousValues {
  id: ID!
  name: String!
}

type BoySubscriptionPayload {
  mutation: MutationType!
  node: Boy
  updatedFields: [String!]
  previousValues: BoyPreviousValues
}

input BoySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoyWhereInput
  AND: [BoySubscriptionWhereInput!]
  OR: [BoySubscriptionWhereInput!]
  NOT: [BoySubscriptionWhereInput!]
}

input BoyUpdateInput {
  name: String
}

input BoyUpdateManyMutationInput {
  name: String
}

input BoyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [BoyWhereInput!]
  OR: [BoyWhereInput!]
  NOT: [BoyWhereInput!]
}

input BoyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBoy(data: BoyCreateInput!): Boy!
  updateBoy(data: BoyUpdateInput!, where: BoyWhereUniqueInput!): Boy
  updateManyBoys(data: BoyUpdateManyMutationInput!, where: BoyWhereInput): BatchPayload!
  upsertBoy(where: BoyWhereUniqueInput!, create: BoyCreateInput!, update: BoyUpdateInput!): Boy!
  deleteBoy(where: BoyWhereUniqueInput!): Boy
  deleteManyBoys(where: BoyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  boy(where: BoyWhereUniqueInput!): Boy
  boys(where: BoyWhereInput, orderBy: BoyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Boy]!
  boysConnection(where: BoyWhereInput, orderBy: BoyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  boy(where: BoySubscriptionWhereInput): BoySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    