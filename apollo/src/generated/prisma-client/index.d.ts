// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  note: (where?: NoteWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  program: (where?: ProgramWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  note: (where: NoteWhereUniqueInput) => NoteNullablePromise;
  notes: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Note>;
  notesConnection: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonNullablePromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  program: (where: ProgramWhereUniqueInput) => ProgramNullablePromise;
  programs: (args?: {
    where?: ProgramWhereInput;
    orderBy?: ProgramOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Program>;
  programsConnection: (args?: {
    where?: ProgramWhereInput;
    orderBy?: ProgramOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProgramConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (args: {
    data: NoteUpdateInput;
    where: NoteWhereUniqueInput;
  }) => NotePromise;
  updateManyNotes: (args: {
    data: NoteUpdateManyMutationInput;
    where?: NoteWhereInput;
  }) => BatchPayloadPromise;
  upsertNote: (args: {
    where: NoteWhereUniqueInput;
    create: NoteCreateInput;
    update: NoteUpdateInput;
  }) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProgram: (data: ProgramCreateInput) => ProgramPromise;
  updateProgram: (args: {
    data: ProgramUpdateInput;
    where: ProgramWhereUniqueInput;
  }) => ProgramPromise;
  updateManyPrograms: (args: {
    data: ProgramUpdateManyMutationInput;
    where?: ProgramWhereInput;
  }) => BatchPayloadPromise;
  upsertProgram: (args: {
    where: ProgramWhereUniqueInput;
    create: ProgramCreateInput;
    update: ProgramUpdateInput;
  }) => ProgramPromise;
  deleteProgram: (where: ProgramWhereUniqueInput) => ProgramPromise;
  deleteManyPrograms: (where?: ProgramWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  program: (
    where?: ProgramSubscriptionWhereInput
  ) => ProgramSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "SL" | "TL" | "WEB" | "DS" | "UX" | "PM";

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "topic_ASC"
  | "topic_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC";

export type ProgramOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type NoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  topic?: Maybe<String>;
  topic_not?: Maybe<String>;
  topic_in?: Maybe<String[] | String>;
  topic_not_in?: Maybe<String[] | String>;
  topic_lt?: Maybe<String>;
  topic_lte?: Maybe<String>;
  topic_gt?: Maybe<String>;
  topic_gte?: Maybe<String>;
  topic_contains?: Maybe<String>;
  topic_not_contains?: Maybe<String>;
  topic_starts_with?: Maybe<String>;
  topic_not_starts_with?: Maybe<String>;
  topic_ends_with?: Maybe<String>;
  topic_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<PersonWhereInput>;
  attendedBy_every?: Maybe<PersonWhereInput>;
  attendedBy_some?: Maybe<PersonWhereInput>;
  attendedBy_none?: Maybe<PersonWhereInput>;
  project?: Maybe<ProjectWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  OR?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  NOT?: Maybe<NoteWhereInput[] | NoteWhereInput>;
}

export interface PersonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  authored_every?: Maybe<NoteWhereInput>;
  authored_some?: Maybe<NoteWhereInput>;
  authored_none?: Maybe<NoteWhereInput>;
  attended_every?: Maybe<NoteWhereInput>;
  attended_some?: Maybe<NoteWhereInput>;
  attended_none?: Maybe<NoteWhereInput>;
  manages_every?: Maybe<ProjectWhereInput>;
  manages_some?: Maybe<ProjectWhereInput>;
  manages_none?: Maybe<ProjectWhereInput>;
  team?: Maybe<ProjectWhereInput>;
  sl_every?: Maybe<ProjectWhereInput>;
  sl_some?: Maybe<ProjectWhereInput>;
  sl_none?: Maybe<ProjectWhereInput>;
  tl?: Maybe<ProjectWhereInput>;
  AND?: Maybe<PersonWhereInput[] | PersonWhereInput>;
  OR?: Maybe<PersonWhereInput[] | PersonWhereInput>;
  NOT?: Maybe<PersonWhereInput[] | PersonWhereInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonWhereInput>;
  teamLead?: Maybe<PersonWhereInput>;
  projectManagers_every?: Maybe<PersonWhereInput>;
  projectManagers_some?: Maybe<PersonWhereInput>;
  projectManagers_none?: Maybe<PersonWhereInput>;
  team_every?: Maybe<PersonWhereInput>;
  team_some?: Maybe<PersonWhereInput>;
  team_none?: Maybe<PersonWhereInput>;
  notes_every?: Maybe<NoteWhereInput>;
  notes_some?: Maybe<NoteWhereInput>;
  notes_none?: Maybe<NoteWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  program?: Maybe<ProgramWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  projects_every?: Maybe<ProjectWhereInput>;
  projects_some?: Maybe<ProjectWhereInput>;
  projects_none?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProgramWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProgramWhereInput[] | ProgramWhereInput>;
  OR?: Maybe<ProgramWhereInput[] | ProgramWhereInput>;
  NOT?: Maybe<ProgramWhereInput[] | ProgramWhereInput>;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProgramWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NoteCreateInput {
  id?: Maybe<ID_Input>;
  topic: String;
  content: String;
  author: PersonCreateOneWithoutAuthoredInput;
  attendedBy?: Maybe<PersonCreateManyWithoutAttendedInput>;
  project: ProjectCreateOneWithoutNotesInput;
}

export interface PersonCreateOneWithoutAuthoredInput {
  create?: Maybe<PersonCreateWithoutAuthoredInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutAuthoredInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface NoteCreateManyWithoutAttendedByInput {
  create?: Maybe<
    NoteCreateWithoutAttendedByInput[] | NoteCreateWithoutAttendedByInput
  >;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteCreateWithoutAttendedByInput {
  id?: Maybe<ID_Input>;
  topic: String;
  content: String;
  author: PersonCreateOneWithoutAuthoredInput;
  project: ProjectCreateOneWithoutNotesInput;
}

export interface ProjectCreateOneWithoutNotesInput {
  create?: Maybe<ProjectCreateWithoutNotesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutNotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
}

export interface ProductCreateOneWithoutProjectsInput {
  create?: Maybe<ProductCreateWithoutProjectsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutProjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  program: ProgramCreateOneWithoutProductsInput;
}

export interface ProgramCreateOneWithoutProductsInput {
  create?: Maybe<ProgramCreateWithoutProductsInput>;
  connect?: Maybe<ProgramWhereUniqueInput>;
}

export interface ProgramCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface PersonCreateOneWithoutSlInput {
  create?: Maybe<PersonCreateWithoutSlInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutSlInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface NoteCreateManyWithoutAuthorInput {
  create?: Maybe<NoteCreateWithoutAuthorInput[] | NoteCreateWithoutAuthorInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  topic: String;
  content: String;
  attendedBy?: Maybe<PersonCreateManyWithoutAttendedInput>;
  project: ProjectCreateOneWithoutNotesInput;
}

export interface PersonCreateManyWithoutAttendedInput {
  create?: Maybe<
    PersonCreateWithoutAttendedInput[] | PersonCreateWithoutAttendedInput
  >;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutAttendedInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface ProjectCreateManyWithoutProjectManagersInput {
  create?: Maybe<
    | ProjectCreateWithoutProjectManagersInput[]
    | ProjectCreateWithoutProjectManagersInput
  >;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutProjectManagersInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface PersonCreateOneWithoutTlInput {
  create?: Maybe<PersonCreateWithoutTlInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutTlInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
}

export interface ProjectCreateOneWithoutTeamInput {
  create?: Maybe<ProjectCreateWithoutTeamInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface PersonCreateManyWithoutManagesInput {
  create?: Maybe<
    PersonCreateWithoutManagesInput[] | PersonCreateWithoutManagesInput
  >;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutManagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface ProjectCreateManyWithoutSectionLeadInput {
  create?: Maybe<
    | ProjectCreateWithoutSectionLeadInput[]
    | ProjectCreateWithoutSectionLeadInput
  >;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutSectionLeadInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface PersonCreateManyWithoutTeamInput {
  create?: Maybe<PersonCreateWithoutTeamInput[] | PersonCreateWithoutTeamInput>;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
}

export interface PersonCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface ProjectCreateOneWithoutTeamLeadInput {
  create?: Maybe<ProjectCreateWithoutTeamLeadInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutTeamLeadInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface NoteCreateManyWithoutProjectInput {
  create?: Maybe<
    NoteCreateWithoutProjectInput[] | NoteCreateWithoutProjectInput
  >;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  topic: String;
  content: String;
  author: PersonCreateOneWithoutAuthoredInput;
  attendedBy?: Maybe<PersonCreateManyWithoutAttendedInput>;
}

export interface NoteUpdateInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<PersonUpdateOneRequiredWithoutAuthoredInput>;
  attendedBy?: Maybe<PersonUpdateManyWithoutAttendedInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutNotesInput>;
}

export interface PersonUpdateOneRequiredWithoutAuthoredInput {
  create?: Maybe<PersonCreateWithoutAuthoredInput>;
  update?: Maybe<PersonUpdateWithoutAuthoredDataInput>;
  upsert?: Maybe<PersonUpsertWithoutAuthoredInput>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonUpdateWithoutAuthoredDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface NoteUpdateManyWithoutAttendedByInput {
  create?: Maybe<
    NoteCreateWithoutAttendedByInput[] | NoteCreateWithoutAttendedByInput
  >;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutAttendedByInput[]
    | NoteUpdateWithWhereUniqueWithoutAttendedByInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutAttendedByInput[]
    | NoteUpsertWithWhereUniqueWithoutAttendedByInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpdateWithWhereUniqueWithoutAttendedByInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutAttendedByDataInput;
}

export interface NoteUpdateWithoutAttendedByDataInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<PersonUpdateOneRequiredWithoutAuthoredInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutNotesInput>;
}

export interface ProjectUpdateOneRequiredWithoutNotesInput {
  create?: Maybe<ProjectCreateWithoutNotesInput>;
  update?: Maybe<ProjectUpdateWithoutNotesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutNotesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutNotesDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
}

export interface ProductUpdateOneRequiredWithoutProjectsInput {
  create?: Maybe<ProductCreateWithoutProjectsInput>;
  update?: Maybe<ProductUpdateWithoutProjectsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutProjectsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutProjectsDataInput {
  name?: Maybe<String>;
  program?: Maybe<ProgramUpdateOneRequiredWithoutProductsInput>;
}

export interface ProgramUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<ProgramCreateWithoutProductsInput>;
  update?: Maybe<ProgramUpdateWithoutProductsDataInput>;
  upsert?: Maybe<ProgramUpsertWithoutProductsInput>;
  connect?: Maybe<ProgramWhereUniqueInput>;
}

export interface ProgramUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
}

export interface ProgramUpsertWithoutProductsInput {
  update: ProgramUpdateWithoutProductsDataInput;
  create: ProgramCreateWithoutProductsInput;
}

export interface ProductUpsertWithoutProjectsInput {
  update: ProductUpdateWithoutProjectsDataInput;
  create: ProductCreateWithoutProjectsInput;
}

export interface PersonUpdateOneWithoutSlInput {
  create?: Maybe<PersonCreateWithoutSlInput>;
  update?: Maybe<PersonUpdateWithoutSlDataInput>;
  upsert?: Maybe<PersonUpsertWithoutSlInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonUpdateWithoutSlDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface NoteUpdateManyWithoutAuthorInput {
  create?: Maybe<NoteCreateWithoutAuthorInput[] | NoteCreateWithoutAuthorInput>;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutAuthorInput[]
    | NoteUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutAuthorInput[]
    | NoteUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutAuthorDataInput;
}

export interface NoteUpdateWithoutAuthorDataInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
  attendedBy?: Maybe<PersonUpdateManyWithoutAttendedInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutNotesInput>;
}

export interface PersonUpdateManyWithoutAttendedInput {
  create?: Maybe<
    PersonCreateWithoutAttendedInput[] | PersonCreateWithoutAttendedInput
  >;
  delete?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  set?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  disconnect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  update?: Maybe<
    | PersonUpdateWithWhereUniqueWithoutAttendedInput[]
    | PersonUpdateWithWhereUniqueWithoutAttendedInput
  >;
  upsert?: Maybe<
    | PersonUpsertWithWhereUniqueWithoutAttendedInput[]
    | PersonUpsertWithWhereUniqueWithoutAttendedInput
  >;
  deleteMany?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
  updateMany?: Maybe<
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput
  >;
}

export interface PersonUpdateWithWhereUniqueWithoutAttendedInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutAttendedDataInput;
}

export interface PersonUpdateWithoutAttendedDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface ProjectUpdateManyWithoutProjectManagersInput {
  create?: Maybe<
    | ProjectCreateWithoutProjectManagersInput[]
    | ProjectCreateWithoutProjectManagersInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueWithoutProjectManagersInput[]
    | ProjectUpdateWithWhereUniqueWithoutProjectManagersInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueWithoutProjectManagersInput[]
    | ProjectUpsertWithWhereUniqueWithoutProjectManagersInput
  >;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateWithWhereUniqueWithoutProjectManagersInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutProjectManagersDataInput;
}

export interface ProjectUpdateWithoutProjectManagersDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface PersonUpdateOneWithoutTlInput {
  create?: Maybe<PersonCreateWithoutTlInput>;
  update?: Maybe<PersonUpdateWithoutTlDataInput>;
  upsert?: Maybe<PersonUpsertWithoutTlInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PersonWhereUniqueInput>;
}

export interface PersonUpdateWithoutTlDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
}

export interface ProjectUpdateOneWithoutTeamInput {
  create?: Maybe<ProjectCreateWithoutTeamInput>;
  update?: Maybe<ProjectUpdateWithoutTeamDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutTeamInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutTeamDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface PersonUpdateManyWithoutManagesInput {
  create?: Maybe<
    PersonCreateWithoutManagesInput[] | PersonCreateWithoutManagesInput
  >;
  delete?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  set?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  disconnect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  update?: Maybe<
    | PersonUpdateWithWhereUniqueWithoutManagesInput[]
    | PersonUpdateWithWhereUniqueWithoutManagesInput
  >;
  upsert?: Maybe<
    | PersonUpsertWithWhereUniqueWithoutManagesInput[]
    | PersonUpsertWithWhereUniqueWithoutManagesInput
  >;
  deleteMany?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
  updateMany?: Maybe<
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput
  >;
}

export interface PersonUpdateWithWhereUniqueWithoutManagesInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutManagesDataInput;
}

export interface PersonUpdateWithoutManagesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface ProjectUpdateManyWithoutSectionLeadInput {
  create?: Maybe<
    | ProjectCreateWithoutSectionLeadInput[]
    | ProjectCreateWithoutSectionLeadInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueWithoutSectionLeadInput[]
    | ProjectUpdateWithWhereUniqueWithoutSectionLeadInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueWithoutSectionLeadInput[]
    | ProjectUpsertWithWhereUniqueWithoutSectionLeadInput
  >;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateWithWhereUniqueWithoutSectionLeadInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutSectionLeadDataInput;
}

export interface ProjectUpdateWithoutSectionLeadDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface PersonUpdateManyWithoutTeamInput {
  create?: Maybe<PersonCreateWithoutTeamInput[] | PersonCreateWithoutTeamInput>;
  delete?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  connect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  set?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  disconnect?: Maybe<PersonWhereUniqueInput[] | PersonWhereUniqueInput>;
  update?: Maybe<
    | PersonUpdateWithWhereUniqueWithoutTeamInput[]
    | PersonUpdateWithWhereUniqueWithoutTeamInput
  >;
  upsert?: Maybe<
    | PersonUpsertWithWhereUniqueWithoutTeamInput[]
    | PersonUpsertWithWhereUniqueWithoutTeamInput
  >;
  deleteMany?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
  updateMany?: Maybe<
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput
  >;
}

export interface PersonUpdateWithWhereUniqueWithoutTeamInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutTeamDataInput;
}

export interface PersonUpdateWithoutTeamDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface ProjectUpdateOneWithoutTeamLeadInput {
  create?: Maybe<ProjectCreateWithoutTeamLeadInput>;
  update?: Maybe<ProjectUpdateWithoutTeamLeadDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutTeamLeadInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutTeamLeadDataInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface NoteUpdateManyWithoutProjectInput {
  create?: Maybe<
    NoteCreateWithoutProjectInput[] | NoteCreateWithoutProjectInput
  >;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutProjectInput[]
    | NoteUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutProjectInput[]
    | NoteUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpdateWithWhereUniqueWithoutProjectInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutProjectDataInput;
}

export interface NoteUpdateWithoutProjectDataInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<PersonUpdateOneRequiredWithoutAuthoredInput>;
  attendedBy?: Maybe<PersonUpdateManyWithoutAttendedInput>;
}

export interface NoteUpsertWithWhereUniqueWithoutProjectInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutProjectDataInput;
  create: NoteCreateWithoutProjectInput;
}

export interface NoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  topic?: Maybe<String>;
  topic_not?: Maybe<String>;
  topic_in?: Maybe<String[] | String>;
  topic_not_in?: Maybe<String[] | String>;
  topic_lt?: Maybe<String>;
  topic_lte?: Maybe<String>;
  topic_gt?: Maybe<String>;
  topic_gte?: Maybe<String>;
  topic_contains?: Maybe<String>;
  topic_not_contains?: Maybe<String>;
  topic_starts_with?: Maybe<String>;
  topic_not_starts_with?: Maybe<String>;
  topic_ends_with?: Maybe<String>;
  topic_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  OR?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  NOT?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface NoteUpdateManyDataInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
}

export interface ProjectUpsertWithoutTeamLeadInput {
  update: ProjectUpdateWithoutTeamLeadDataInput;
  create: ProjectCreateWithoutTeamLeadInput;
}

export interface PersonUpsertWithWhereUniqueWithoutTeamInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutTeamDataInput;
  create: PersonCreateWithoutTeamInput;
}

export interface PersonScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
  OR?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
  NOT?: Maybe<PersonScalarWhereInput[] | PersonScalarWhereInput>;
}

export interface PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput;
  data: PersonUpdateManyDataInput;
}

export interface PersonUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface ProjectUpsertWithWhereUniqueWithoutSectionLeadInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutSectionLeadDataInput;
  create: ProjectCreateWithoutSectionLeadInput;
}

export interface ProjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  OR?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  NOT?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectUpdateManyDataInput {
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface PersonUpsertWithWhereUniqueWithoutManagesInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutManagesDataInput;
  create: PersonCreateWithoutManagesInput;
}

export interface ProjectUpsertWithoutTeamInput {
  update: ProjectUpdateWithoutTeamDataInput;
  create: ProjectCreateWithoutTeamInput;
}

export interface PersonUpsertWithoutTlInput {
  update: PersonUpdateWithoutTlDataInput;
  create: PersonCreateWithoutTlInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutProjectManagersInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutProjectManagersDataInput;
  create: ProjectCreateWithoutProjectManagersInput;
}

export interface PersonUpsertWithWhereUniqueWithoutAttendedInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutAttendedDataInput;
  create: PersonCreateWithoutAttendedInput;
}

export interface NoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutAuthorDataInput;
  create: NoteCreateWithoutAuthorInput;
}

export interface PersonUpsertWithoutSlInput {
  update: PersonUpdateWithoutSlDataInput;
  create: PersonCreateWithoutSlInput;
}

export interface ProjectUpsertWithoutNotesInput {
  update: ProjectUpdateWithoutNotesDataInput;
  create: ProjectCreateWithoutNotesInput;
}

export interface NoteUpsertWithWhereUniqueWithoutAttendedByInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutAttendedByDataInput;
  create: NoteCreateWithoutAttendedByInput;
}

export interface PersonUpsertWithoutAuthoredInput {
  update: PersonUpdateWithoutAuthoredDataInput;
  create: PersonCreateWithoutAuthoredInput;
}

export interface NoteUpdateManyMutationInput {
  topic?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PersonCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  role: Role;
  authored?: Maybe<NoteCreateManyWithoutAuthorInput>;
  attended?: Maybe<NoteCreateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectCreateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectCreateOneWithoutTeamInput>;
  sl?: Maybe<ProjectCreateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectCreateOneWithoutTeamLeadInput>;
}

export interface PersonUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  authored?: Maybe<NoteUpdateManyWithoutAuthorInput>;
  attended?: Maybe<NoteUpdateManyWithoutAttendedByInput>;
  manages?: Maybe<ProjectUpdateManyWithoutProjectManagersInput>;
  team?: Maybe<ProjectUpdateOneWithoutTeamInput>;
  sl?: Maybe<ProjectUpdateManyWithoutSectionLeadInput>;
  tl?: Maybe<ProjectUpdateOneWithoutTeamLeadInput>;
}

export interface PersonUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  program: ProgramCreateOneWithoutProductsInput;
  projects?: Maybe<ProjectCreateManyWithoutProductInput>;
}

export interface ProjectCreateManyWithoutProductInput {
  create?: Maybe<
    ProjectCreateWithoutProductInput[] | ProjectCreateWithoutProductInput
  >;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  name: String;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  program?: Maybe<ProgramUpdateOneRequiredWithoutProductsInput>;
  projects?: Maybe<ProjectUpdateManyWithoutProductInput>;
}

export interface ProjectUpdateManyWithoutProductInput {
  create?: Maybe<
    ProjectCreateWithoutProductInput[] | ProjectCreateWithoutProductInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueWithoutProductInput[]
    | ProjectUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueWithoutProductInput[]
    | ProjectUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateWithWhereUniqueWithoutProductInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutProductDataInput;
}

export interface ProjectUpdateWithoutProductDataInput {
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface ProjectUpsertWithWhereUniqueWithoutProductInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutProductDataInput;
  create: ProjectCreateWithoutProductInput;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProgramCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutProgramInput>;
}

export interface ProductCreateManyWithoutProgramInput {
  create?: Maybe<
    ProductCreateWithoutProgramInput[] | ProductCreateWithoutProgramInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutProgramInput {
  id?: Maybe<ID_Input>;
  name: String;
  projects?: Maybe<ProjectCreateManyWithoutProductInput>;
}

export interface ProgramUpdateInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutProgramInput>;
}

export interface ProductUpdateManyWithoutProgramInput {
  create?: Maybe<
    ProductCreateWithoutProgramInput[] | ProductCreateWithoutProgramInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutProgramInput[]
    | ProductUpdateWithWhereUniqueWithoutProgramInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutProgramInput[]
    | ProductUpsertWithWhereUniqueWithoutProgramInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutProgramInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutProgramDataInput;
}

export interface ProductUpdateWithoutProgramDataInput {
  name?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutProgramInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutProgramDataInput;
  create: ProductCreateWithoutProgramInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProgramUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  product: ProductCreateOneWithoutProjectsInput;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonCreateOneWithoutSlInput>;
  teamLead?: Maybe<PersonCreateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonCreateManyWithoutManagesInput>;
  team?: Maybe<PersonCreateManyWithoutTeamInput>;
  notes?: Maybe<NoteCreateManyWithoutProjectInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutProjectsInput>;
  status?: Maybe<Boolean>;
  sectionLead?: Maybe<PersonUpdateOneWithoutSlInput>;
  teamLead?: Maybe<PersonUpdateOneWithoutTlInput>;
  projectManagers?: Maybe<PersonUpdateManyWithoutManagesInput>;
  team?: Maybe<PersonUpdateManyWithoutTeamInput>;
  notes?: Maybe<NoteUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteWhereInput>;
  AND?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  OR?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  NOT?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonWhereInput>;
  AND?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
  OR?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
  NOT?: Maybe<PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProgramSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProgramWhereInput>;
  AND?: Maybe<ProgramSubscriptionWhereInput[] | ProgramSubscriptionWhereInput>;
  OR?: Maybe<ProgramSubscriptionWhereInput[] | ProgramSubscriptionWhereInput>;
  NOT?: Maybe<ProgramSubscriptionWhereInput[] | ProgramSubscriptionWhereInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Note {
  id: ID_Output;
  topic: String;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  topic: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = PersonPromise>() => T;
  attendedBy: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  project: <T = ProjectPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  topic: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = PersonSubscription>() => T;
  attendedBy: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  project: <T = ProjectSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoteNullablePromise
  extends Promise<Note | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  topic: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = PersonPromise>() => T;
  attendedBy: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  project: <T = ProjectPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Person {
  id: ID_Output;
  name: String;
  email: String;
  role: Role;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  authored: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attended: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manages: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = ProjectPromise>() => T;
  sl: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tl: <T = ProjectPromise>() => T;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  authored: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attended: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manages: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = ProjectSubscription>() => T;
  sl: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tl: <T = ProjectSubscription>() => T;
}

export interface PersonNullablePromise
  extends Promise<Person | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  authored: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attended: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manages: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = ProjectPromise>() => T;
  sl: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tl: <T = ProjectPromise>() => T;
}

export interface Project {
  id: ID_Output;
  name: String;
  status?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  status: () => Promise<Boolean>;
  sectionLead: <T = PersonPromise>() => T;
  teamLead: <T = PersonPromise>() => T;
  projectManagers: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  status: () => Promise<AsyncIterator<Boolean>>;
  sectionLead: <T = PersonSubscription>() => T;
  teamLead: <T = PersonSubscription>() => T;
  projectManagers: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  status: () => Promise<Boolean>;
  sectionLead: <T = PersonPromise>() => T;
  teamLead: <T = PersonPromise>() => T;
  projectManagers: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Product {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  program: <T = ProgramPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  program: <T = ProgramSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  projects: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  program: <T = ProgramPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Program {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProgramPromise extends Promise<Program>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProgramSubscription
  extends Promise<AsyncIterator<Program>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProgramNullablePromise
  extends Promise<Program | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProgramConnection {
  pageInfo: PageInfo;
  edges: ProgramEdge[];
}

export interface ProgramConnectionPromise
  extends Promise<ProgramConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProgramEdge>>() => T;
  aggregate: <T = AggregateProgramPromise>() => T;
}

export interface ProgramConnectionSubscription
  extends Promise<AsyncIterator<ProgramConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProgramEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProgramSubscription>() => T;
}

export interface ProgramEdge {
  node: Program;
  cursor: String;
}

export interface ProgramEdgePromise extends Promise<ProgramEdge>, Fragmentable {
  node: <T = ProgramPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProgramEdgeSubscription
  extends Promise<AsyncIterator<ProgramEdge>>,
    Fragmentable {
  node: <T = ProgramSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProgram {
  count: Int;
}

export interface AggregateProgramPromise
  extends Promise<AggregateProgram>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProgramSubscription
  extends Promise<AsyncIterator<AggregateProgram>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface NotePreviousValues {
  id: ID_Output;
  topic: String;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  topic: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  topic: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface PersonPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  role: Role;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProgramSubscriptionPayload {
  mutation: MutationType;
  node: Program;
  updatedFields: String[];
  previousValues: ProgramPreviousValues;
}

export interface ProgramSubscriptionPayloadPromise
  extends Promise<ProgramSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProgramPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProgramPreviousValuesPromise>() => T;
}

export interface ProgramSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProgramSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProgramSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProgramPreviousValuesSubscription>() => T;
}

export interface ProgramPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProgramPreviousValuesPromise
  extends Promise<ProgramPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProgramPreviousValuesSubscription
  extends Promise<AsyncIterator<ProgramPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
  status?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Program",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
